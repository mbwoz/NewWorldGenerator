#pragma kernel Cube

#include "./Perlin.compute"

static const int numThreads = 8;

struct Triangle {
    float3 a, b, c;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<int> triangulation;

int size;
float3 transition;

float3 vertexOffset(int edge) {
    switch (edge) {
        case 0: return float3(0.5, 0, 0);
        case 1: return float3(1, 0.5, 0);
        case 2: return float3(0.5, 1, 0);
        case 3: return float3(0, 0.5, 0);
        case 4: return float3(0.5, 0, 1);
        case 5: return float3(1, 0.5, 1);
        case 6: return float3(0.5, 1, 1);
        case 7: return float3(0, 0.5, 1);
        case 8: return float3(0, 0, 0.5);
        case 9: return float3(1, 0, 0.5);
        case 10: return float3(1, 1, 0.5);
        case 11: return float3(0, 1, 0.5);
        default: return -1; // never happens
    }
}

[numthreads(numThreads, numThreads, numThreads)]
void Cube(int3 id : SV_DispatchThreadID) {
    if (id.x >= size || id.y >= size || id.z >= size)
        return;

    int mask = 0;
    for (int i = 0; i < 8; i++) {
        float3 pos = float3((i & 1), ((i >> 1) & 1), (i >> 2));
        pos += transition + id;
        mask |= ((perlinDot(pos * dotsScale)) << i);
    }

    for (int j = 0; triangulation[16 * mask + j] != -1; j += 3) {
        Triangle t;
        t.a = transition + id + vertexOffset(triangulation[16 * mask + j]);
        t.b = transition + id + vertexOffset(triangulation[16 * mask + j + 1]);
        t.c = transition + id + vertexOffset(triangulation[16 * mask + j + 2]);
        triangles.Append(t);
    }
}
